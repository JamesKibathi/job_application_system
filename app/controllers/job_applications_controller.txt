class JobApplicationsController < ApplicationController

  before_action :authenticate_user, only: [:create]
  before_action :set_job

  def create
    # Handle user job applications

    @job_application = @job.job_applications.new(user: current_user)

    if @job_application.save
      render json: @job_application, status: :created
      
    else
      render json: @job_application.errors, status: :unprocessable_entity

    end
  end

  def index
      # List user's job applications
      render json: {Greetings:"Hello son"}
  end


  private

  def job_application_params
    params.require(:job_application).permit(:job_id)
  end

  def authenticate_user

    unless user_authenticated?

      render json: {error:'Unauthorized'}, status: :unauthorized

    end
  end

  def user_authenticated?

    token = request.headers['Authorization']&.split('')&.last
    secret_key = ENV['JWT_SECRET_KEY']

    # return false unless token
    begin
      decoded = JWT.decode(token, secret_key, true, algorithm: 'HS256')
      user_id = decoded[0]['user_id']
      @current_user = User.find(user_id)
      # Check if the user exists and is valid
    rescue JWT::DecodeError
      @current_user = nil
      render_unauthorized('Invalid or expired token')
    end
  end

  def render_unauthorized(message)
    render json: { error: message }, status: :unauthorized
  end


  def set_job
    @job = Job.find(params[:job_id])
  end

end
